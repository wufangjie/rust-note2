* Ownership
https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html

** Ownership Rules
1. Each value in Rust has a variable that’s called its owner.
2. There can only be one owner at a time.
3. When the owner goes out of scope, the value will be dropped.

** transfer ownership (move/partial move)
*** 方式
+ 赋值
+ 函数调用 (rust 的传参都属于值传递, 传引用其实也是栈上指针的传递)

*** 内存的变化
表现为栈上数据的 move (copy) 的

我做了以下尝试, 也无法阻止这种移动, 当然也可能是 println! 的关系
用的是 cargo run --release
#+begin_src rust
#[inline(always)]
fn consume_string(s: String) {
    println!("{:p}", &s);
}


struct MyI32 {
    i: i32,
}

impl Drop for MyI32 {
    fn drop(&mut self) {
        println!("{:p}", self);
    }
}
#+end_src

*** mutablity
move 的时候可以改变变量的 mutablity

*** partial move
struct 字段享有独立的 ownership, 所以可以 partial move out, 只是这样做之后不能再使用完整的 struct 对象, 使用没有 move out 的字段是可以的

** shadowing
同 scope 的 shadowing 就算类型相同也会开辟新空间, 并且不会 drop 之前的, scope 结束时才会释放, 只是无法用 safe 方式取到而已, 这样做也许是为了和 scoped shadowing 统一

#+begin_src rust
struct TestShadow {
    x: i32,
}

impl Drop for TestShadow {
    fn drop(&mut self) {
        println!("dropping a = {}", self.x);
    }
}

fn main() {
    let a = TestShadow {x:1};
    let p = &a as *const TestShadow as *mut TestShadow;
    let a = TestShadow {x:2};
    let a = TestShadow {x:3};

    drop(a);
    println!("dropped a=3");

    unsafe {
        std::ptr::drop_in_place(p);
    }
    println!("can not drop a=1");
    assert_eq!(1, unsafe { (*p).x });
}
#+end_src

** temporary variable 及其作用域扩大
*** 临时变量有临时的 owner, 一般当前语句执行完就会被 drop
#+begin_src rust
use std::rc::Rc;
let a = Rc::new(5);
Rc::clone(&a); // temporary
assert_eq!(1, Rc::strong_count(&a));
#+end_src

*** 临时变量作用域扩大
#+begin_src rust
let mut s = &String::from("hello"); // works
s = &String::from("world"); // not work
#+end_src
NOTE: 能扩大的只能是 let binding 或类似的 pattern, 比如作为函数参数

https://doc.rust-lang.org/reference/destructors.html#temporary-lifetime-extension
https://users.rust-lang.org/t/how-to-understand-temporary-lifetime-extension-correctly/70503/7

* borrow and lifetime
死灵书的关于 lifetime 的那些章节帮助从理论上理解 lifetime
以下这篇文章讲了很多 lifetime 的使用细节
https://github.com/pretzelhammer/rust-blog/blob/master/posts/common-rust-lifetime-misconceptions.md

** Reference Rules (Borrowing Rules)
1. At any given time, you can have either one mutable reference or any number of immutable references.
2. References must always be valid.

NOTE: valid means:
1. reference can not outlive its owner, i.e. ref's scope is not longer than its owner's
2. cannot borrow immutable value as mutable
3. is not dangling

** 定义
Lifetimes are named regions of code that a reference must be valid for T

解读:
1. lifetime 是关于 T 的 lifetime, 用来标记 &T, &mut T (也可以是包含它们的 struct 等) 的有效范围
2. lifetime 可以有多个, 可以重叠, 通过 borrow checker 来判断所有这些 lifetimes 合在一起是否合法

NOTE: 上面的 T 不一定是 owned type, 也可以是 reference
#+begin_src rust
let a = 5;
let mut b = &a;
let c = &mut b;
dbg!(a, c);
#+end_src

*** 相同 'a 的含义 (以 longest 为例)
+ 'a 并不表示 x, y 的 lifetime 一样
+ 相同 'a 其实是入参 lifetime 的最小值

从定义出发的解释: x 在 'a 内有效, y 在 'a 内有效, 满足这两个条件的 'a 最多可以取到 x, y lifetime 的最小值, 也就是返回值最多能有效的 lifetime (返回值 lifetime 的定义)

#+begin_src rust
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}
#+end_src

** 哪些类型或地方需要 (可以) 标记 lifetime
1. references: &'a T, &'a mut T
2. types contains references: T<'a> (可以有多个 lifetime)
3. T: T: Trait + 'a
4. trait object: Box<dyn Trait + 'a>

加 'a 是通过加 lifetime 让 borrow checker 帮忙确保正确的使用范围

** 一些规则
1. each let will implicitly introduces a scope
2. borrow checker always tries to minimize the extent of a lifetime
3. passing references to outer scopes will cause Rust to infer a larger lifetime
4. a reference is alive from the place it is created to its last use

*** 1, 3 两点例子
#+begin_src rust
let x = 0;
let z;
let y = &x;
z = y;

// desugar
'a: {
    let x: i32 = 0;
    'b: {
        let z: &'b i32;
        'c: {
            let y: &'b i32 = &'b x; // pass ref to outer, extend 'c to 'b
            z = y;
        }
    }
}
#+end_src

*** 第 4 点的一个有趣的例子
#+begin_src rust
#[derive(Debug)]
struct X<'a>(&'a i32);

impl Drop for X<'_> {
    fn drop(&mut self) {}
}

let mut data = vec![1, 2, 3];
let x = X(&data[0]);
println!("{:?}", x);
data.push(4);
// implicitly call drop(x), so extend &data[0] lifetime to here
#+end_src

*** reborrow 的 lifetime 解释 (结合后面的 reborrow 一起看)
估计是 'c 还是 mutable reference lifetime, 只是不能做修改之类的操作

#+begin_src rust
#[derive(Debug)]
struct Foo;

impl Foo {
    fn mutate_and_share(&mut self) -> &Self { &*self }
    fn share(&self) {}
}

fn main() {
    let mut foo = Foo;
    let loan = foo.mutate_and_share();
    foo.share();
    println!("{:?}", loan);
}

// desugar, extend temporary &mut foo to 'c
fn main() {
    'b: {
        let mut foo: Foo = Foo;
        'c: {
            let loan: &'c Foo = Foo::mutate_and_share::<'c>(&'c mut foo);
            'd: {
                Foo::share::<'d>(&'d foo);
            }
            println!("{:?}", loan);
        }
    }
}
#+end_src

** Lifetime Elision
1. Each elided lifetime in input position becomes a distinct lifetime parameter
2. If there is exactly one input lifetime position (elided or not), that lifetime is assigned to all elided output lifetimes
3. If there are multiple input lifetime positions, but one of them is &self or &mut self, the lifetime of self is assigned to all elided output lifetimes

** lifetime bound 'a: 'b
读作 'a outlive 'b, 意思是 'a 的作用域至少和 'b 一样长
记忆: 类比 T1: T2 supertrait, 满足 T1 的必满足 T2

** T, &T, &mut T
+ T, 可以是任意类型, 包括 &T, &mut T 和 owned types
+ &T 和 &mut T 是正交关系

#+begin_src rust
trait Trait {}
impl<T> Trait for T {}      // 只去掉这句可以通过编译
impl<T> Trait for &T {}     // 只去掉这句不行
impl<T> Trait for &mut T {} // 只去掉这句也不行
#+end_src

** &'static T VS T: 'static
*** &'static T
这个的意思是 T 拥有 static lifetime, 需要 T 存活直到程序结束, T 可以是写入 binary 的 str, static 变量, 也可以通过内存泄漏在运行时构造

#+begin_src rust
fn make_static_ref_at_runtime(i: u64) -> &'static str {
    Box::leak(i.to_string().into_boxed_str())
}
#+end_src

*** T: 'static
这个的意思是只要 T **可以** 存活任意长的时间而不依赖其他变量，所以只要 T 的所有字段都是 'static reference 或 owned 的就行

读作: T is bounded by a 'static lifetime

#+begin_src rust
fn owned_type_share_static_lifetime<T: std::fmt::Debug + 'static>(t: T) {
    dbg!(t);
}

fn main() {
    let a = String::from("Just a simple owned type");
    owned_type_share_static_lifetime(a); // it's ok
}
#+end_src

** &'a T VS T: 'a
这个是上一个比较的更普遍版本,
&'a T 表示 ref 在 'a 内都有效
T: 'a 的所有字段都是 lifetime >= 'a 或 owned

** 不要过于乱省略或乱标, 不要过于依赖编译器
*** 乱标的例子
按照我们之前理解, 函数里的 &'a mut self 说的是: 在 'a 内这个 &mut obj 都有效
再看看 'a 是什么, 'a 是 i32 的 lifetime, NumRef<'a> 说的是在 'a 内 obj 都可以有效
那么问题来了, 直到最后一行 obj 都有效, 那么两个 &mut obj 也需要都有效
解决方法: 把函数中的 'a 去掉或换成别的字母
#+begin_src rust
struct NumRef<'a>(&'a i32);

impl<'a> NumRef<'a> {
    fn fn_need_exclude_ref(&'a mut self) {
	// do something
    }
}

fn main() {
    let mut obj = NumRef(&5);
    obj.fn_need_exclude_ref();
    obj.fn_need_exclude_ref();
}
#+end_src

*** 乱省略的例子
以下函数补全后是这样的: fn next<'b>(&'b mut self) -> Option<&'b u8> (NOTE: is 'b not 'a)
+ main 的最后一行用了 byte1 和 byte2, 而 byte1 等的 lifetime 依赖调用 next 是的临时生成的 &mut bytes
+ reference 临时变量并不会像 owned 临时变量一样用完就 drop, 只要满足 borrow checker 可以任意长
+ 综上, 在 main 最后一行我们需要两个 mutable borrow

#+begin_src rust
struct ByteIter<'a> {
    reminder: &'a [u8],
}

impl<'a> ByteIter<'a> {
    fn next(&mut self) -> Option<&u8> {
        if self.reminder.is_empty() {
            None
        } else {
            let byte = &self.reminder[0];
            self.reminder = &self.reminder[1..];
            Some(byte)
        }
    }
}

fn main() {
    let mut bytes = ByteIter { reminder: b"1123" };
    let byte1 = bytes.next();
    let byte2 = bytes.next();
    assert_eq!(byte1, byte2);
}
#+end_src

** reborrow (downgrade &mut T to &T)
有以下三种方法可以完成 &mut T 到 &T 的转变, 这样做的后果是转变后的 &T 的 lifetime 里相当于 &mut 仍然存在, 不能再有别的 immutable borrow
所以除非是类方法的 receiver 的限定 (此时也是自动转的, 不用手动加以下的代码), 否则没必要这么做

#+begin_src rust
fn reborrow<T>(x: &mut T) -> &T {
    x
}

fn main() {
    let mut a = "hello".to_string();
    let b = reborrow(&mut a);
    let c = &mut a as &String;
    let d = &*(&mut a);
    // dbg!(b, c, d);
}
#+end_src

*** 一个有趣的例子
编译不能通过, 因为隐式地使用了 reborrow
#+begin_src rust
let mut dct: std::collections::HashMap<_, _> = vec![1, 2, 3]
    .into_iter()
    .zip(vec!["one", "two", "three"])
    .collect();

let s1 = dct.entry(2).or_default();
let s2 = dct.entry(4).or_default();
assert_ne!(s1, s2);
#+end_src

修改, 虽然看起来是有点别扭
#+begin_src rust
let mut dct: std::collections::HashMap<_, _> = vec![1, 2, 3]
    .into_iter()
    .zip(vec!["one", "two", "three"])
    .collect();

dct.entry(2).or_default();
dct.entry(4).or_default();
let s1 = dct.get(&2);
let s2 = dct.get(&4);
assert_ne!(s1, s2);
#+end_src

*** 死灵书对此的解释 (lifetime extend)
#+begin_src rust
struct Foo;

impl Foo {
    fn mutate_and_share<'a>(&'a mut self) -> &'a Self { &'a *self }
    fn share<'a>(&'a self) {}
}

fn main() {
    'b: {
        let mut foo: Foo = Foo;
        'c: {
            let loan: &'c Foo = Foo::mutate_and_share::<'c>(&'c mut foo);
            'd: {
                Foo::share::<'d>(&'d foo);
            }
            println!("{:?}", loan);
        }
    }
}
#+end_src

** for<'a> and closure with lifetime
没看懂, 短时间内应该是用不到

* std::mem
** swap, replace, take
各种置换 (底层实现是指针的读写)，非常强大, 但也因此带来了很多问题
1. &mut T 如果是 Send 的, 那么 T 也是 Send, 因为通过 swap/replace/take 可以用 &mut T 得到 T; 实际上好像不能直接 send &mut T, 只能先 send T 再取 &mut
2. Pin 的引入也是因为 swap 包含自引用的 struct 时引用不会跟着 swap, 会导致 UB

** size_of, size_of_val
学习或 debug 时经常会用到的功能, 获取类型/变量的大小

** drop, forget, ManuallyDrop
+ drop: call variable's destructor
+ forget: take onwership without calling drop()

#+begin_src rust
pub fn drop<T>(_x: T) {}

pub const fn forget<T>(t: T) {
    let _ = ManuallyDrop::new(t);
}
#+end_src

*** ManuallyDrop
为数不多的 rust 魔法之一, 编译器开的后门导致 T 不会被析构
感觉很有用, 但不太清楚该怎么用, 就四个 associated function

#+begin_src rust
pub const fn new(value: T) -> ManuallyDrop<T>;
pub const fn into_inner(slot: ManuallyDrop<T>) -> T;
pub unsafe fn take(slot: &mut ManuallyDrop<T>);
pub unsafe fn drop(slot: &mut ManuallyDrop<T>);
#+end_src

** transmute
这个也是在学习或 DEBUG 时比较有用
1. 比如获取某个 struct 的私有字段
2. 做一些非正常的转换 (不能用 as 比如 usize 到 fn(&i32)), 这样还可以用来探索比如 vtable 的结构

*** 探索 Vec 内部结构
#+begin_src rust
let mut lst = Vec::with_capacity(10);
lst.push("hello");
lst.push("world");

let (p, cap, len) = unsafe { std::mem::transmute::<Vec<&str>, (usize, usize, usize)>(lst) };
println!("0x{:x}", p); // it's on heap
let p2 = p as *const &str;
assert_eq!("hello", unsafe { *p2 });
assert_eq!("world", unsafe { *p2.offset(1) });
assert_eq!(10, cap);
assert_eq!(2, len);
#+end_src

*** 探索 vtable
#+begin_src rust
use std::mem::transmute;

trait Foo {
    fn bar(&self);

    fn baz(&self)
    where
        Self: Sized;

    fn qux(&self) {
        println!("calling qux: blanket implementation");
    }
}

impl<T: std::fmt::Debug> Foo for T {
    fn bar(&self) {
        println!("calling bar: {:?}", self);
    }

    fn baz(&self) {
        println!("calling baz: {:?}", self);
    }
}

fn main() {
    let x: Box<dyn Foo> = Box::new(42);
    let (pdata, vtable) = unsafe { transmute::<Box<dyn Foo>, (*const i32, *const usize)>(x) };
    assert_eq!(42, unsafe { *pdata });
    let f_bar = unsafe { transmute::<usize, fn(&i32)>(*vtable.offset(3)) };
    f_bar(unsafe { &*pdata });
    let f_qux = unsafe { transmute::<usize, fn(&i32)>(*vtable.offset(4)) };
    f_qux(unsafe { &*pdata });
}
#+end_src

* trait object
https://articles.bchlr.de/traits-dynamic-dispatch-upcasting
https://doc.rust-lang.org/reference/items/traits.html

** super trait VS trait bound
#+begin_src rust
trait Foo: Bar {}
trait Foo: where Self: Bar {}
#+end_src
两者其实是一样的, 只是视角不同
super trait 说的是 Foo trait 的前提 trait 是 Bar
bound 说的是要实现 Foo 的类型必须是实现了 Bar 的

** orphan rule
为一个类型实现一个 trait, 那么类型或 trait 至少要有一个是自定义的

** impl VS dyn
+ impl trait 等价于定义一个实现了该 trait 的范型 (compile-time static dispatch)
+ dyn 是 trait object, (runtime dynamic dispatch) 是 Rust 2018 引入的符号 (之前用的是 &trait, 看老的资料时能反应过来就行)

** DST
trait object 是 dst, 所以 dyn 只能放在 &, &mut, Box, Rc, Arc 这些的后面, 它的大小是普通指针的两倍 (一个指向具体数据的指针 + 一个指向具体类型 vtable 的指针)

为 DST impl trait 也是有意义的, 因为我们可以通过 &self, &mut self 或其他智能指针的 deref 来调用相应的 trait methods

** Sized bound
为什么加上 Sized bound 能让 trait 做不成 trait object

我的理解:
1. trait object 作为一种类型, 它也是可以 impl some trait 的, 但 trait object 具体类型千奇百怪, 导致我们不可能为它实现别的 trait, 上面说的 some trait 只能是那个让它作为 trait object 的 trait
2. 这是一种可以自动实现的特殊实现, 也就是 dynamic dispath
3. 如果我们为 trait 加上 Sized bound, 那么因为 trait object 是 DST 不满足这个 super trait, 所以我们不能为其 impl trait, 无法 dynamic dispatch, 也就可以说不能构建 trait object

rustc 的具体实现可能不是这样, 但很有助于理解

** associated type/constant/function
associated type is object safe, while associated const and function are not

#+begin_src rust
trait Simple {
    // const CONST: i32 = 1; // not object safe, just think about where can we store it

    type Item;

    fn simple(&self) -> Self::Item;

    fn make_const() -> i32
    where
        Self: Sized,
    {
        println!("Making associated constant...");
        1
    }

    fn associate_fn()
    where
        Self: Sized,
    {
        println!("Calling associated function...");
    }
}

impl Simple for i32 {
    type Item = i32;

    fn simple(&self) -> Self::Item {
        1
    }
}

fn main() {
    let a: &dyn Simple<Item = i32> = &42i32;
    assert_eq!(1, a.simple());

    // Simple::make_const(); // can not do this, can not know determine which function to call
    assert_eq!(1, <i32 as Simple>::make_const());
}
#+end_src

** generic trait VS trait with associated type
we can impl multiple SomeTrait<T> for one specific type, but only can impl one trait with specific associated type

** vtable
*** 一个 trait 加一个 type 确定一个 vtable
1. vtable 不在对象里, 都是重复的浪费; 不在 type 里, 是为了可扩展, 用户随时都可以为某个类 impl 新的 trait
2. trait object 不能以 dyn trait1 + trait2 的形式, 除非 trait2 是 auto trait, 因为 auto trait 那个没有 trait method, 就无所谓 vtable 了, trait object 还是两个指针大小; 若要求满足多个 trait, 那只能定义一个新的 trait, 也就是把两个 vtable 合成了一个新的 vtable

#+begin_src rust
let a = &42 as &(dyn std::fmt::Debug + Send);
// let b = &42 as &(dyn std::fmt::Debug + std::fmt::Display); // can not do this
#+end_src

*** 如何探索 vtable 的结构
两种方法:
1. std::mem::transmute (详见上文的 std::mem 那一节)
2. std::ptr::DynMetadata

*** 如何让指定 trait method 不进入 vtable
类比做不成 trait object 的方式, 可以为该方法加 bound 即 where Self: Sized

** object safe
https://doc.rust-lang.org/reference/items/traits.html#object-safety

*** Self
trait function 的参数和返回值不能是 Self 类型的, 因为编译器无法确定它们的大小, 放在 & 后是可以的

*** generic
#+begin_src rust
fn add_true_impl(vec: &mut impl Extend<bool>) {
    vec.extend(Some(true)); // Option impled IntoIterator
}

// fn add_true_dyn(vec: &mut dyn Extend<bool>) {
//     vec.extend(Some(true));
// }

fn main() {
    let mut a = vec![false];
    add_true_impl(&mut a);
    assert_eq!(a, vec![false, true]);
}
#+end_src

上面注释掉的 add_true_dyn 通不过编译, 不是因为不能是范型 trait, 而是这个范型的 trait methods 还有别的范型

比如 extend 的 I: IntoIterator<Item = A>, 这样具体实现了该 trait 的类型, 比如 Vec 就 **找不到一个** 函数指针来构建 vtable (每个范型会有不同的拷贝)

#+begin_src rust
pub trait Extend<A> {
    fn extend<I: IntoIterator<Item = A>>(&mut self, iter: I);
}
#+end_src

以下的例子是可行的, 事实上 MyExtend<bool> (这个和 associated type 也有区别) 和普通的 trait 没有任何区别
#+begin_src rust
pub trait MyExtend<T> {
    fn my_extend(&mut self, x: T);
}

impl MyExtend<bool> for Vec<bool> {
    fn my_extend(&mut self, x: bool) {
        self.push(x)
    }
}

fn add_true_dyn(vec: &mut dyn MyExtend<bool>) {
    vec.my_extend(true);
}
#+end_src

* fn and Fn
https://doc.rust-lang.org/reference/types/closure.html

** fn item
也就是函数名, size 为 0, 可以转成 fn pointer

** closure
1. 每一个 closure 都是不同的类型 (即使参数返回值函数体完全相同)
2. 可以捕获外部的状态
3. 只有未捕获外部状态时可以转成 fn pointer
4. closure 不支持递归

** move
move 关键字只改变变量的捕获方式, 不改变 closure 实现 Fn/FnMut/FnOnce 的推导
#+begin_src rust
fn main() {
    let mut a = vec!["hello", "world"];

    let b = move || {
	println!("{:?}", a); // Fn
	//a.push("rust"); // FnMut, 取消注释看编译器的提示
	//drop(a); // FnOnce, 取消注释看编译器的提示
    };

    let c = &b as &dyn Fn();
}
#+end_src

** 转换
不同于变量的 owner variable -> mutable reference -> immutable reference
即通过 owner 变量我们可以得到 &mut, 进一步可以转化为 &

closure 从实现的角度看反过来的 Fn() -> FnMut() -> FnOnce()
从依赖 (super trait) 的角度看还是同方向, 实际使用多数是从上一个角度来看

#+begin_src rust
pub trait FnOnce<Args> { /* ... */ }
pub trait FnMut<Args>: FnOnce<Args> { /* ... */ }
pub trait Fn<Args>: FnMut<Args> { /* ... */ }
#+end_src

** Fn
receiver 是 &self, 且最多会用到外部的 immutable reference, 多次/同时调用都不会有问题

** FnMut
receiver 是 &mut self, 会用到外部的 mutable referece, 也就是要求同一时间只能出现一个调用

显然可以调用多次的 Fn 满足这个要求 (同一时间只出现一个调用), 而满足 FnMut 的不一定能满足 Fn 的要求

** FnOnce
receiver 是 self, 是 consume 的, 所以只能调用一次

* Send and Sync
** auto trait
意思就是: 如果子类型实现了该 trait, 那么自动为其实现该 trait, 除非手动不指定实现
具体定义可以看: https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits

#+begin_src rust
pub unsafe auto trait Send {
    // empty.
}

pub unsafe auto trait Sync {
    // empty.
}

#[lang = "unpin"]
pub auto trait Unpin {}
#+end_src

** marker trait
std::marker Send, Sync, Sized, Unpin, Copy

** 定义
Send: 可以安全地在线程间转移所有权
Sync: T is Sync if and only if &T is Send (T 是 Sync 的定义就是可以安全地在线程间传递 (Send) &T)

NOTE: Send 是有前提的, 比如 borrow checker, 有 borrowed 就不能 send, 所以判断 send 是否安全的时候不能考虑线程还有 borrow 的情况

而 Rc 确实都是 owned, 即使没有 &Rc 这种, 它们 Send 之后, 会有 data race

** !Send and !Sync types
+ Rc
+ raw pointer 可以是任意类型的指针, 如果那个是 !Send 或 !Sync, 那么解引用也是
+ NonNull 同 raw pointer

** !Send but (auto) Sync types
+ MutexGuard
+ RwReadGuard
+ RwWriteGuard

because lock and release in differnt threads are supposed to be UB

** !Sync but (auto) Send types
+ Cell
+ RefCell
+ UnsafeCell

NOTE: SyncUnsafeCell 是 Sync, 其代码和 UnsafeCell 完全一样, 需要用户手动保证同步

** &T and &mut T
#+begin_src rust
impl<T> Send for &T
where
    T: Sync + ?Sized

impl<T> Send for &mut T
where
    T: Send + ?Sized
#+end_src
第一个其实就是 Sync 的定义
第二个有点类似 (或者就是?) auto trait
+ 必要性: std::mem 的一大堆置换相关的黑魔法存在, 所以只要得到了 &mut T 就能达到和 Send T 同样的效果
+ 充分性: Send 之后可以通过 &mut 直接得到
+ 事实上: 好像无法直接 Send &mut T

** Cell is Send but not Sync, &Cell is not Send
** 违反自动实现的情况 (结合以上的特例来理解就很简单)
*** Arc<T>, std::sync::Weak<T> need T: Sync + Send
#+begin_src rust
impl<T> Sync for Arc<T>
where
    T: Sync + Send + ?Sized, // need Send because of Arc<SomeGuard> + Arc::get_mut

impl<T> Send for Arc<T>
where
    T: Sync + Send + ?Sized, // need Sync because of Arc<Cell<T>>
#+end_src

*** for those only keep & data
#+begin_src rust
impl<'a, A> Send for std::option::Iter<'a, A>
where
    A: Sync
#+end_src

*** Mutex
#+begin_src rust
impl<T: ?Sized + Send> Sync for Mutex<T>
#+end_src
.lock() can get &mut T and then T (std::mem)
why not need T: Sync, because of the lock only one thread can get &T
而 RwLock 就需要 T: Sync

* async
https://rust-lang.github.io/async-book/

以下给出描述性的解释 (可能有些不严谨), 有个大致的概念
** future (impl Future<Output = YouExpect>)
1. 可以期望最终会得到一个结果 Output
2. 它是 lazy 的 (即如果不 poll 它, 它不会尝试 make progress)
3. 被 drop 的话 future 里后续的代码都不会再运行
4. async function 是 future 最常见的形式

** yield (协程)
1. 在调用异步的时候 (比如 io), 当前 future 会 yield 出运行权, 好让其他 future 可以 make progress
2. 异步调用完成后, 如果没有运行权的话是不能继续运行后续代码的, 只能调用 waker 让 executor 来 poll 自己后才能继续

** executor
yield 出的运行权由谁来接管, 一般是上一层, 但最顶层的通常只是一个 block_on, 如果没有 executor 的话运行权没法向下传递

** poll/waker
1. 由 executor 发起, 作用是让对应的 future 尝试 make progress, 如果暂时还得不到结果就留一个 waker, 好让 future 在可以 make progress 时 (即当前在跑的异步完成) 通知 executor 再来 poll 自己
2. 一个 future 第一次开始运行的时候会被 poll 一次

** 异步策略 await/join/try_join/select
1. await: 等待直到该异步完成 (线性)
2. join: 等待所有 join 的异步完成
3. try_join: 等待所有 try_join 的异步完成, 若遇到某个 future 结束返回 Err 则会提前结束
4. select: 等待直到 select 的异步中有一个完成 (通常会在外面套一个 loop 来实现更复杂的逻辑)

** pin
async block 或 async function 都是一个 impl Future type, 所以代码里的变量以及它们的引用就构成了一个自引用结构, 自引用结构如果 move 就会带来 UB, pin 就是用来解决这个问题的

* DST and ZST
** DST
*** rules
+ we cannot know how long a DST is until runtime
+ we cannot create a variable of type DST
+ we cannot take an argument of type DST

Golden Rule: we must always put values of dynamically sized types behind a pointer of some kind

*** examples of dst
+ [T]
+ str (str is a DST, while &str is slice)
+ trait object

*** size_of_val VS size_of::<&DST>
#+begin_src rust
use std::fmt::Display;
use std::mem::{size_of, size_of_val};

fn main() {
    assert!(vec![
        &1i8 as &dyn Display,
        &2i64 as &dyn Display,
        &3i128 as &dyn Display,
    ]
    .into_iter()
    .map(|x| size_of_val(x))
    .eq([1, 8, 16]));
    assert_eq!(size_of::<&u8>() * 2, size_of::<&dyn Display>());
}
#+end_src

** ZST
https://runrust.miraheze.org/wiki/Zero-sized_type

* Memory Safe
** 分类
| 悬垂指针 | dangling pointer |
| UAF      | use after free   |
|          | double free      |
| 未初始化 |                  |
| 空指针   |                  |
| 越界访问 |                  |
| 内存溢出 |                  |
| 内存泄漏 | memory leak      |
|          | data race        |

** 说明
rust 能解决的也不是所有的内存安全问题, 而是近年来频率最高的一些

** data race and race condition
https://blog.regehr.org/archives/490

*** data race
两种形式, 以两个线程为例:
1. 同时读写 (且至少一个写) (比如: 写了一半被读, 或分别写入了数据的不同部分, 造成不合法数据, UB)
2. 都要读写但不是同时 (且写的内容和读到的数据有关, 比如为原始数据+x) (但写之前没有进行数据同步, 用的是很久之前读到的数据)

解决方法: 互斥锁或读写锁

*** race conditon
和执行顺序有关的非 data race 造成的错误

解决方法: 改用单线程, 或重新设计流程, 或用状态机

*** 两者的关系
|              | Race Condition | no Race Condition |
| Data Race    |                |                   |
| no Data Race |                |                   |

1. 两者相互独立, 以上四种情况都可能存在, 但很多时候它们都是同时出现的
2. rust 能解决的是 data race
3. data race 属于 UB
4. 可以看看这一节最开始的 url 给出的四种情况的例子

* Memory Order
主要是解决为了效率引入的代码乱序和缓存同步问题

这篇文章结合硬件讲的非常好
https://www.cnblogs.com/ishen/p/13200838.html

| store_buffer     | release |
| invalidate_queue | acquire |

* 这后面的内容还比较乱, 有时间再整理
* 易错和小技巧
** deref
#+begin_src rust
impl<T: ?Sized> const Deref for &mut T {
    type Target = T;
    fn deref(&self) -> &Self::Target {
	*self // actually this self is &&mut T
    }
}
#+end_src

** 0.. 表示零到无穷

** 慎用 let _ = y;
目前为止那个博主 (jon gjengset) 翻车过两次, 一个是想用这句触发 drop 但实际上没有
另一次是想验证自己实现的 Rc 是否是 Send 的
这句可能被优化过, 并没有实际的作用 (其实单用一个 y 就可以了)

** useful macros
+ unreachable!
+ dbg! (my dbgt!)

** retain()
Retains only the elements specified by the predicate
This method operates in place, visiting each element exactly once in the original order, and preserves the order of the retained elements.

基本 collection 都实现了 retain, 可以看看官方文档的例子

#+begin_src rust
let mut left = lst[0].clone();
for i in 1..lst.len() {
    left.retain(|x| lst[i].contains(x));
}
#+end_src

** match pattern/ergonomic
https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html
https://doc.rust-lang.org/rust-by-example/flow_control/match.html
https://rust-lang.github.io/rfcs/2005-match-ergonomics.html

** inner and outer attributes
+ inner attribute, must at the beginning of file (or block?) exclude comments
+ outer means out of the (following) declaration?
+ outer attributes' annotated items could be structs, enums and unions

#+BEGIN_SRC rust
#![no_std] // inner attributes
#![allow(dead_code)]

#[allow(dead_code)]
#[derive(Debug)] // outer attributes
#+END_SRC

* 分散知识汇总
** Cow (Clone on Write)
为了提高性能, 只有当需要写入的时候才 clone, 比如字符串的底层就是这个
#+begin_src rust
pub enum Cow<'a, B>
where
    B: 'a + Owned + ?Sized,
{
    Borrowd(&'a B),
    Owned(<B as Owned>::Owned)

}
#+end_src

** bounds
*** T: Trait (trait bound syntax)
*** T: 'a
T: 'a means that all lifetime parameters of T outlive 'a
T: 'static basically means that T is a type that does not contain any non-'static references, even nested

*** T: Trait + 'a
*** SubTrait: SuperTrait
*** 'a: 'b (lifetime bound)
+ read as 'a outlives 'b
+ means that 'a lasts at least as long as 'b
https://doc.rust-lang.org/reference/trait-bounds.html#lifetime-bounds

*** TODO Higher-ranked trait bounds
*** Trait Object Lifetime Bounds
#+begin_src rust
&dyn Trait + 'a
#+end_src
** and/or sugar
|        | or | or_else | or_default |
|        |    |         |            |
| unwrap |    |         |            |
| map    |    |         |            |
| ok     |    |         |            |
| err    |    |         |            |

** as_ref, as_mut, get_ref, get_mut
** Drop Check
太复杂且不是很重要, 可以看死灵书

* rust 的魔法
** manuallydrop
#[lang = "manually_drop"] attribute is what connects it to that special behavior in the compiler

** box 的 drop
#+begin_src rust
unsafe impl<#[may_dangle] T: ?Sized, A: Allocator> Drop for Box<T, A> {
    fn drop(&mut self) {
        // FIXME: Do nothing, drop is currently performed by compiler.
    }
}
#+end_src

* 实战
** Flatten
https://www.youtube.com/watch?v=yozQ9C69pNs

** channel
https://www.youtube.com/watch?v=b4mS5UPHh20

sync channels: send 也是阻塞的，因为通道有大小限制 (不至于无限扩大)

** async_book
https://rust-lang.github.io/async-book/

timer_future
executor
