https://rust-lang.github.io/async-book/
https://tokio.rs/tokio/tutorial

以下给出描述性的解释 (可能有些不严谨), 有个大致的概念
* future (impl Future<Output = YouExpect>)
1. 可以期望最终会得到一个结果 Output
2. 它是 lazy 的 (即如果不 poll 它, 它不会尝试 make progress)
3. 被 drop 的话 future 里后续的代码都不会再运行
4. async function 是 future 最常见的形式

* yield (协程)
1. 在调用异步的时候 (比如 io), 当前 future 会 yield 出运行权, 好让其他 future 可以 make progress
2. 异步调用完成后, 如果没有运行权的话是不能继续运行后续代码的, 只能调用 waker 让 executor 来 poll 自己后才能继续

* executor
yield 出的运行权由谁来接管, 一般是上一层, 但最顶层的通常只是一个 block_on, 如果没有 executor 的话运行权没法向下传递

* poll/waker
1. 由 executor 发起, 作用是让对应的 future 尝试 make progress, 如果暂时还得不到结果就留一个 waker, 好让 future 在可以 make progress 时 (即当前在跑的异步完成) 通知 executor 再来 poll 自己
2. 一个 future 第一次开始运行的时候会被 poll 一次

* 异步策略 await/join/try_join/select
1. await: 等待直到该异步完成 (线性)
2. join: 等待所有 join 的异步完成
3. try_join: 等待所有 try_join 的异步完成, 若遇到某个 future 结束返回 Err 则会提前结束
4. select: 等待直到 select 的异步中有一个完成 (通常会在外面套一个 loop 来实现更复杂的逻辑)

* pin
参考 async book 的第四章
https://rust-lang.github.io/async-book/04_pinning/01_chapter.html

** pin's contract
promise: 一个 T 被 pin, 除非 T: Unpin, 否则它将不会被 move, 直到 T 被 drop (即使 Pin 被 drop 了也要保证)
Pin 其实并不能从代码层面保证这个 promise, 只是能做出一些限制
T: Unpin 说的是 move 不 move 都无所谓, 所以 Pin 就完全不会限制, 就算这个结构是自引用
而其他情况都要通过 new_unchecked 这个 unsafe 的方法构造, 所以其实都是要人为保证, 但因为 Pin 保证了不能获得 &mut T, 所以只需要注意实现 DerefMut, Drop 这些能得到 &mut T 的方法时不 move 以及 Pin 被 drop 后的情况

** why pin
async block 或 async function 都是一个 impl Future type, 所以代码里的变量以及它们的引用就构成了一个自引用结构, 自引用结构如果 move 就会带来 UB, pin 就是用来解决这个问题的

** new/new_unchecked
new 是 unsafe 的, 并且只能生成 T: Unpin 的
new_unchecked

** as_[ref|mut]
Pin 的 get_[ref|mut|unchecked_mut] 函数都是 consume 的, 并且要求 Pin 里面的是指针是引用形式, 所以一般要先调用 as_[ref|mut] 来防止 consume 和转换类型

** get_[ref|mut|unchecked_mut]
NOTE: as_mut() 之后是不能 get_ref() 必须再 as_ref() (因为定义)

** Deref/DerefMut
很有用, 但是为了不和 Pin 的方法混淆, 一般会用 Pin::some_method(&obj)
参考自己实现的 pin.rs 的 test_pin_not_change_receiver()

** shadowing
一般是新建对象, 然后用 shadowing 生成 Pin<&mut T>, 因为 shadowing 所以对象不会被释放, 并且隐藏了入口, 不用担心违反 Pin 的 contract

** map_unchecked_mut, pin_project
有时间再深入吧

** learn source code
看了一下源码, 照着实现了个最简单的, 见 pin.rs
