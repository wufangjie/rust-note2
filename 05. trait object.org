https://articles.bchlr.de/traits-dynamic-dispatch-upcasting
https://doc.rust-lang.org/reference/items/traits.html
* super trait VS trait bound
#+begin_src rust
trait Foo: Bar {}
trait Foo: where Self: Bar {}
#+end_src
两者其实是一样的, 只是视角不同
super trait 说的是 Foo trait 的前提 trait 是 Bar
bound 说的是要实现 Foo 的类型必须是实现了 Bar 的

* orphan rule
为一个类型实现一个 trait, 那么类型或 trait 至少要有一个是自定义的

* impl VS dyn
+ impl trait 等价于定义一个实现了该 trait 的范型 (compile-time static dispatch)
+ dyn 是 trait object, (runtime dynamic dispatch) 是 Rust 2018 引入的符号 (之前用的是 &trait, 看老的资料时能反应过来就行)

* DST
trait object 是 dst, 所以 dyn 只能放在 &, &mut, Box, Rc, Arc 这些的后面, 它的大小是普通指针的两倍 (一个指向具体数据的指针 + 一个指向具体类型 vtable 的指针)

为 DST impl trait 也是有意义的, 因为我们可以通过 &self, &mut self 或其他智能指针的 deref 来调用相应的 trait methods

* Sized bound
为什么加上 Sized bound 能让 trait 做不成 trait object

我的理解:
1. trait object 作为一种类型, 它也是可以 impl some trait 的, 但 trait object 具体类型千奇百怪, 导致我们不可能为它实现别的 trait, 上面说的 some trait 只能是那个让它作为 trait object 的 trait
2. 这是一种可以自动实现的特殊实现, 也就是 dynamic dispath
3. 如果我们为 trait 加上 Sized bound, 那么因为 trait object 是 DST 不满足这个 super trait, 所以我们不能为其 impl trait, 无法 dynamic dispatch, 也就可以说不能构建 trait object

rustc 的具体实现可能不是这样, 但很有助于理解

一点佐证:
https://internals.rust-lang.org/t/make-associated-consts-object-safe/16357
提到 The current way that trait objects work is in that they actually implement the trait

* generic trait VS trait with associated type
we can impl multiple SomeTrait<T> for one specific type, but only can impl one trait with specific associated type

* vtable
** 一个 trait 加一个 type 确定一个 vtable
1. vtable 不存在对象里, 因为同一个 type 都是一样的, 浪费; 也不在 type 里, 是为了可扩展, 用户随时都可以为某个类 impl 新的 trait
2. trait object 不能以 dyn trait1 + trait2 的形式, 除非 trait2 是 auto trait, 因为 auto trait 那个没有 trait method, 就无所谓 vtable 了, trait object 还是两个指针大小; 若要求满足多个 trait, 那只能定义一个新的 trait, 也就是把两个 vtable 合成了一个新的 vtable

#+begin_src rust
let a = &42 as &(dyn std::fmt::Debug + Send);
// let b = &42 as &(dyn std::fmt::Debug + std::fmt::Display); // can not do this
#+end_src

** 如何探索 vtable 的结构的两种方法
1. std::mem::transmute (详见 std::mem 那一节)
2. std::ptr::DynMetadata

** 如何让指定 trait method 不进入 vtable
类比做不成 trait object 的方式, 可以为该方法加 bound 即 where Self: Sized

* object safe
Restrict which traits can be used to make trait objects.

https://doc.rust-lang.org/reference/items/traits.html#object-safety

** Self
trait function 的参数和返回值不能是 Self 类型的, 因为编译器无法确定它们的大小, 放在 & 后是可以的

** Sized must not be a supertrait
详见 Sized bound

** generic
#+begin_src rust
fn add_true_impl(vec: &mut impl Extend<bool>) {
    vec.extend(Some(true)); // Option impled IntoIterator
}

// fn add_true_dyn(vec: &mut dyn Extend<bool>) {
//     vec.extend(Some(true));
// }

fn main() {
    let mut a = vec![false];
    add_true_impl(&mut a);
    assert_eq!(a, vec![false, true]);
}
#+end_src

上面注释掉的 add_true_dyn 通不过编译, 不是因为不能是范型 trait, 而是这个范型的 trait methods 还有别的范型

比如 extend 的 I: IntoIterator<Item = A>, 这样具体实现了该 trait 的类型, 比如 Vec 就 **找不到一个** 函数指针来构建 vtable (每个范型会有不同的拷贝)

#+begin_src rust
pub trait Extend<A> {
    fn extend<I: IntoIterator<Item = A>>(&mut self, iter: I);
}
#+end_src

以下的例子是可行的, 事实上 MyExtend<bool> (这个和 associated type 也有区别) 和普通的 trait 没有任何区别
#+begin_src rust
pub trait MyExtend<T> {
    fn my_extend(&mut self, x: T);
}

impl MyExtend<bool> for Vec<bool> {
    fn my_extend(&mut self, x: bool) {
        self.push(x)
    }
}

fn add_true_dyn(vec: &mut dyn MyExtend<bool>) {
    vec.my_extend(true);
}
#+end_src

* associated type/constant/function
associated type is object safe, while associated const and function are not

#+begin_src rust
trait Simple {
    // const CONST: i32 = 1; // not object safe, just think about where can we store it

    type Item;

    fn simple(&self) -> Self::Item;

    fn make_const() -> i32
    where
        Self: Sized,
    {
        println!("Making associated constant...");
        1
    }

    fn associate_fn()
    where
        Self: Sized,
    {
        println!("Calling associated function...");
    }
}

impl Simple for i32 {
    type Item = i32;

    fn simple(&self) -> Self::Item {
        1
    }
}

fn main() {
    let a: &dyn Simple<Item = i32> = &42i32;
    assert_eq!(1, a.simple());

    // Simple::make_const(); // can not do this, can not know determine which function to call
    assert_eq!(1, <i32 as Simple>::make_const()); // NOTE: we need know the type
}
#+end_src
